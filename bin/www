#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const chalk = require('chalk');
const debug = require('debug')('aidi-recruitment-project-management:server');
const http = require('http');

const { error: loggerError } = require('../utils/utils.logger');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.DEV_PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      loggerError(`${bind}requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      loggerError(`${bind}is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  console.log(chalk.bold.green(`项目启动成功: ${process.env.DEV_URL}:${process.env.DEV_PORT}`));
  console.log(chalk.bold.green(`接口文档地址: ${process.env.SWEG_URL}:${process.env.DEV_PORT}/swagger`));
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
